/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { LUXSaleUtil, LUXSaleUtilInterface } from "../../src/LUXSaleUtil";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract LUXSale",
        name: "_sale",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "dailyTotals",
    outputs: [
      {
        internalType: "uint256[369]",
        name: "result",
        type: "uint256[369]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sale",
    outputs: [
      {
        internalType: "contract LUXSale",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "userBuys",
    outputs: [
      {
        internalType: "uint256[369]",
        name: "result",
        type: "uint256[369]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "userClaims",
    outputs: [
      {
        internalType: "bool[369]",
        name: "result",
        type: "bool[369]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104b73803806104b783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610424806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806348d2df48146100515780636ad1fe021461007a57806383c56fc8146100a5578063f0a3563c146100ad575b600080fd5b61006461005f366004610310565b6100cd565b6040516100719190610340565b60405180910390f35b60005461008d906001600160a01b031681565b6040516001600160a01b039091168152602001610071565b610064610187565b6100c06100bb366004610310565b610237565b6040516100719190610373565b6100d56102f0565b60005b61017181101561018157600054604051633904e1bf60e01b8152600481018390526001600160a01b03858116602483015290911690633904e1bf90604401602060405180830381865afa158015610133573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610157919061039f565b8282610171811061016a5761016a6103b8565b602002015280610179816103ce565b9150506100d8565b50919050565b61018f6102f0565b60005b61017181101561023357600054604051631f4d3d6b60e21b8152600481018390526001600160a01b0390911690637d34f5ac90602401602060405180830381865afa1580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610209919061039f565b8282610171811061021c5761021c6103b8565b60200201528061022b816103ce565b915050610192565b5090565b61023f6102f0565b60005b6101718110156101815760005460405163120aa87760e01b8152600481018390526001600160a01b0385811660248301529091169063120aa87790604401602060405180830381865afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906103f5565b828261017181106102d4576102d46103b8565b91151560209092020152806102e8816103ce565b915050610242565b60405180612e200160405280610171906020820280368337509192915050565b60006020828403121561032257600080fd5b81356001600160a01b038116811461033957600080fd5b9392505050565b612e208101818360005b61017181101561036a57815183526020928301929091019060010161034a565b50505092915050565b612e208101818360005b61017181101561036a578151151583526020928301929091019060010161037d565b6000602082840312156103b157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016103ee57634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561040757600080fd5b8151801515811461033957600080fdfea164736f6c6343000814000a";

type LUXSaleUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LUXSaleUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LUXSaleUtil__factory extends ContractFactory {
  constructor(...args: LUXSaleUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _sale: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_sale, overrides || {});
  }
  override deploy(
    _sale: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_sale, overrides || {}) as Promise<
      LUXSaleUtil & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LUXSaleUtil__factory {
    return super.connect(runner) as LUXSaleUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LUXSaleUtilInterface {
    return new Interface(_abi) as LUXSaleUtilInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LUXSaleUtil {
    return new Contract(address, _abi, runner) as unknown as LUXSaleUtil;
  }
}
