/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestUser,
  TestUserInterface,
} from "../../../src/LUXSale.test.sol/TestUser";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TestableLUXSale",
        name: "_sale",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "doBuy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "window",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "doBuyWithLimit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "window",
        type: "uint256",
      },
    ],
    name: "doClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "doExec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "doFreeze",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sale",
    outputs: [
      {
        internalType: "contract TestableLUXSale",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161053538038061053583398101604081905261002f91610059565b6001600081905580546001600160a01b0319166001600160a01b0392909216919091179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b61049d806100986000396000f3fe6080604052600436106100595760003560e01c806302686879146100655780636ad1fe0214610087578063a00e37fa146100c3578063e8cb03cc146100d6578063fb7c0a3f146100eb578063fbb2539f146100fe57600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50610085610080366004610432565b61011e565b005b34801561009357600080fd5b506001546100a7906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100856100d136600461044b565b610191565b3480156100e257600080fd5b50610085610292565b6100856100f9366004610432565b61030e565b34801561010a57600080fd5b50610085610119366004610432565b610395565b610126610408565b60015460405163379607f560e01b8152600481018390526001600160a01b039091169063379607f590602401600060405180830381600087803b15801561016c57600080fd5b505af1158015610180573d6000803e3d6000fd5b5050505061018e6001600055565b50565b610199610408565b8234146101a557600080fd5b60015460405163249c937d60e21b8152600481018490526000916001600160a01b0316906392724df490602401602060405180830381865afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190610477565b600154604051630842d27160e01b81526004810186905260248101859052604481018390529192506001600160a01b031690630842d2719034906064016000604051808303818588803b15801561026957600080fd5b505af115801561027d573d6000803e3d6000fd5b50505050505061028d6001600055565b505050565b61029a610408565b600160009054906101000a90046001600160a01b03166001600160a01b03166362a5af3b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102ea57600080fd5b505af11580156102fe573d6000803e3d6000fd5b5050505061030c6001600055565b565b610316610408565b80341461032257600080fd5b600160009054906101000a90046001600160a01b03166001600160a01b031663a6f2ae3a346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561037257600080fd5b505af1158015610386573d6000803e3d6000fd5b505050505061018e6001600055565b61039d610408565b6001546040516000916001600160a01b03169083908381818185875af1925050503d80600081146103ea576040519150601f19603f3d011682016040523d82523d6000602084013e6103ef565b606091505b50509050806103fd57600080fd5b5061018e6001600055565b60026000540361042b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006020828403121561044457600080fd5b5035919050565b60008060006060848603121561046057600080fd5b505081359360208301359350604090920135919050565b60006020828403121561048957600080fd5b505191905056fea164736f6c6343000814000a";

type TestUserConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUserConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUser__factory extends ContractFactory {
  constructor(...args: TestUserConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _sale: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_sale, overrides || {});
  }
  override deploy(
    _sale: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_sale, overrides || {}) as Promise<
      TestUser & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestUser__factory {
    return super.connect(runner) as TestUser__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUserInterface {
    return new Interface(_abi) as TestUserInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestUser {
    return new Contract(address, _abi, runner) as unknown as TestUser;
  }
}
