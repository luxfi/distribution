/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LUXSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WLUXToken"
      | "acceptedTokens"
      | "addLiquidityFullRange"
      | "claim"
      | "contribute"
      | "convertToUSD"
      | "getCurrentWindow"
      | "getWindowTotalUSD"
      | "numberOfDays"
      | "openTime"
      | "owner"
      | "renounceOwnership"
      | "router"
      | "setTokenWhitelist"
      | "startTime"
      | "tokenContributions"
      | "tokenToPool"
      | "tokenWhitelist"
      | "totalWLUXForSale"
      | "transferOwnership"
      | "unsoldTokens"
      | "userBuys"
      | "userContributionsUSD"
      | "userTotalContributedUSD"
      | "windowTotals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogAddToLUXLP"
      | "LogBuy"
      | "LogClaim"
      | "LogLiquidity"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "WLUXToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityFullRange",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToUSD",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWindowTotalUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "openTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTokenWhitelist",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenContributions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWLUXForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsoldTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBuys",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userContributionsUSD",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalContributedUSD",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "windowTotals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WLUXToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityFullRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWindowTotalUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWLUXForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsoldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBuys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userContributionsUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalContributedUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "windowTotals",
    data: BytesLike
  ): Result;
}

export namespace LogAddToLUXLPEvent {
  export type InputTuple = [window: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [window: bigint, amount: bigint];
  export interface OutputObject {
    window: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBuyEvent {
  export type InputTuple = [
    window: BigNumberish,
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    usdValue: BigNumberish
  ];
  export type OutputTuple = [
    window: bigint,
    user: string,
    token: string,
    amount: bigint,
    usdValue: bigint
  ];
  export interface OutputObject {
    window: bigint;
    user: string;
    token: string;
    amount: bigint;
    usdValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogClaimEvent {
  export type InputTuple = [
    window: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [window: bigint, user: string, amount: bigint];
  export interface OutputObject {
    window: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogLiquidityEvent {
  export type InputTuple = [
    window: BigNumberish,
    tokenAmount: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    window: bigint,
    tokenAmount: bigint,
    token: string
  ];
  export interface OutputObject {
    window: bigint;
    tokenAmount: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LUXSale extends BaseContract {
  connect(runner?: ContractRunner | null): LUXSale;
  waitForDeployment(): Promise<this>;

  interface: LUXSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WLUXToken: TypedContractMethod<[], [string], "view">;

  acceptedTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addLiquidityFullRange: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      feeTier: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[window: BigNumberish], [void], "nonpayable">;

  contribute: TypedContractMethod<
    [window: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  convertToUSD: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getCurrentWindow: TypedContractMethod<[], [bigint], "view">;

  getWindowTotalUSD: TypedContractMethod<
    [windowIndex: BigNumberish],
    [bigint],
    "view"
  >;

  numberOfDays: TypedContractMethod<[], [bigint], "view">;

  openTime: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setTokenWhitelist: TypedContractMethod<
    [tokens: AddressLike[], pools: AddressLike[]],
    [void],
    "nonpayable"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  tokenContributions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  tokenToPool: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  tokenWhitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  totalWLUXForSale: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unsoldTokens: TypedContractMethod<[window: BigNumberish], [bigint], "view">;

  userBuys: TypedContractMethod<
    [window: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  userContributionsUSD: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  userTotalContributedUSD: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  windowTotals: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { totalUSD: bigint; unsoldWLUX: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WLUXToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addLiquidityFullRange"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      feeTier: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[window: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<
    [window: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "convertToUSD"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWindowTotalUSD"
  ): TypedContractMethod<[windowIndex: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfDays"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setTokenWhitelist"
  ): TypedContractMethod<
    [tokens: AddressLike[], pools: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenContributions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenToPool"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "tokenWhitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalWLUXForSale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsoldTokens"
  ): TypedContractMethod<[window: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "userBuys"
  ): TypedContractMethod<
    [window: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userContributionsUSD"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTotalContributedUSD"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "windowTotals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { totalUSD: bigint; unsoldWLUX: bigint }],
    "view"
  >;

  getEvent(
    key: "LogAddToLUXLP"
  ): TypedContractEvent<
    LogAddToLUXLPEvent.InputTuple,
    LogAddToLUXLPEvent.OutputTuple,
    LogAddToLUXLPEvent.OutputObject
  >;
  getEvent(
    key: "LogBuy"
  ): TypedContractEvent<
    LogBuyEvent.InputTuple,
    LogBuyEvent.OutputTuple,
    LogBuyEvent.OutputObject
  >;
  getEvent(
    key: "LogClaim"
  ): TypedContractEvent<
    LogClaimEvent.InputTuple,
    LogClaimEvent.OutputTuple,
    LogClaimEvent.OutputObject
  >;
  getEvent(
    key: "LogLiquidity"
  ): TypedContractEvent<
    LogLiquidityEvent.InputTuple,
    LogLiquidityEvent.OutputTuple,
    LogLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "LogAddToLUXLP(uint256,uint256)": TypedContractEvent<
      LogAddToLUXLPEvent.InputTuple,
      LogAddToLUXLPEvent.OutputTuple,
      LogAddToLUXLPEvent.OutputObject
    >;
    LogAddToLUXLP: TypedContractEvent<
      LogAddToLUXLPEvent.InputTuple,
      LogAddToLUXLPEvent.OutputTuple,
      LogAddToLUXLPEvent.OutputObject
    >;

    "LogBuy(uint256,address,address,uint256,uint256)": TypedContractEvent<
      LogBuyEvent.InputTuple,
      LogBuyEvent.OutputTuple,
      LogBuyEvent.OutputObject
    >;
    LogBuy: TypedContractEvent<
      LogBuyEvent.InputTuple,
      LogBuyEvent.OutputTuple,
      LogBuyEvent.OutputObject
    >;

    "LogClaim(uint256,address,uint256)": TypedContractEvent<
      LogClaimEvent.InputTuple,
      LogClaimEvent.OutputTuple,
      LogClaimEvent.OutputObject
    >;
    LogClaim: TypedContractEvent<
      LogClaimEvent.InputTuple,
      LogClaimEvent.OutputTuple,
      LogClaimEvent.OutputObject
    >;

    "LogLiquidity(uint256,uint256,address)": TypedContractEvent<
      LogLiquidityEvent.InputTuple,
      LogLiquidityEvent.OutputTuple,
      LogLiquidityEvent.OutputObject
    >;
    LogLiquidity: TypedContractEvent<
      LogLiquidityEvent.InputTuple,
      LogLiquidityEvent.OutputTuple,
      LogLiquidityEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
