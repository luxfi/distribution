/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LUXSaleTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LUX"
      | "addTime"
      | "nextRound"
      | "owner"
      | "sale"
      | "setUp"
      | "testBuy"
      | "testBuyFirstDay"
      | "testBuyLaterWindow"
      | "testBuyWithLimit"
      | "testCollect"
      | "testFailBuyOverLimit"
      | "testFailBuyTooLate"
      | "testFreeze"
      | "testMultiUserAsymmetricBid"
      | "user1"
      | "user2"
      | "window"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "LUX", values?: undefined): string;
  encodeFunctionData(functionFragment: "addTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextRound",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "sale", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "testBuy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testBuyFirstDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBuyLaterWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBuyWithLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCollect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailBuyOverLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailBuyTooLate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFreeze",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMultiUserAsymmetricBid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "user1", values?: undefined): string;
  encodeFunctionData(functionFragment: "user2", values?: undefined): string;
  encodeFunctionData(functionFragment: "window", values?: undefined): string;

  decodeFunctionResult(functionFragment: "LUX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testBuyFirstDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBuyLaterWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBuyWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailBuyOverLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailBuyTooLate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testFreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testMultiUserAsymmetricBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "user2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "window", data: BytesLike): Result;
}

export interface LUXSaleTest extends BaseContract {
  connect(runner?: ContractRunner | null): LUXSaleTest;
  waitForDeployment(): Promise<this>;

  interface: LUXSaleTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LUX: TypedContractMethod<[], [string], "view">;

  addTime: TypedContractMethod<[], [void], "nonpayable">;

  nextRound: TypedContractMethod<
    [wad: BigNumberish, wad1: BigNumberish, wad2: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  sale: TypedContractMethod<[], [string], "view">;

  setUp: TypedContractMethod<[], [void], "nonpayable">;

  testBuy: TypedContractMethod<[], [void], "nonpayable">;

  testBuyFirstDay: TypedContractMethod<[], [void], "nonpayable">;

  testBuyLaterWindow: TypedContractMethod<[], [void], "nonpayable">;

  testBuyWithLimit: TypedContractMethod<[], [void], "nonpayable">;

  testCollect: TypedContractMethod<[], [void], "nonpayable">;

  testFailBuyOverLimit: TypedContractMethod<[], [void], "nonpayable">;

  testFailBuyTooLate: TypedContractMethod<[], [void], "nonpayable">;

  testFreeze: TypedContractMethod<[], [void], "nonpayable">;

  testMultiUserAsymmetricBid: TypedContractMethod<[], [void], "nonpayable">;

  user1: TypedContractMethod<[], [string], "view">;

  user2: TypedContractMethod<[], [string], "view">;

  window: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LUX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addTime"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextRound"
  ): TypedContractMethod<
    [wad: BigNumberish, wad1: BigNumberish, wad2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sale"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testBuy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testBuyFirstDay"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testBuyLaterWindow"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testBuyWithLimit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCollect"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testFailBuyOverLimit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testFailBuyTooLate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testFreeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testMultiUserAsymmetricBid"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "user1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "user2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "window"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
